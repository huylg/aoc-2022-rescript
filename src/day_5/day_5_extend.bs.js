// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Caml_splice_call = require("rescript/lib/js/caml_splice_call.js");

var input = Belt_Array.keep(Fs.readFileSync("src/day_5/input", "utf8").split("\n"), (function (e) {
        return e !== "";
      }));

var stacks = [
  [],
  [
    "W",
    "R",
    "F"
  ],
  [
    "T",
    "H",
    "M",
    "C",
    "D",
    "V",
    "W",
    "P"
  ],
  [
    "P",
    "M",
    "Z",
    "N",
    "L"
  ],
  [
    "J",
    "C",
    "H",
    "R"
  ],
  [
    "C",
    "P",
    "G",
    "H",
    "Q",
    "T",
    "B"
  ],
  [
    "G",
    "C",
    "W",
    "L",
    "F",
    "Z"
  ],
  [
    "W",
    "V",
    "L",
    "Q",
    "Z",
    "J",
    "G",
    "C"
  ],
  [
    "P",
    "N",
    "R",
    "F",
    "W",
    "T",
    "V",
    "C"
  ],
  [
    "J",
    "W",
    "H",
    "G",
    "R",
    "S",
    "V"
  ]
];

function pp(a) {
  console.log(Belt_Array.map(a, (function (__x) {
              return Belt_Array.reduce(__x, "", (function (a, b) {
                            return a + b;
                          }));
            })));
}

var actions = Belt_Array.map(Belt_Array.map(Belt_Array.sliceToEnd(input, 9), (function (__x) {
            return __x.split(" ");
          })), (function (e) {
        return {
                amount: Belt_Int.fromString(e[1]),
                from: Belt_Int.fromString(e[3]),
                to: Belt_Int.fromString(e[5])
              };
      }));

actions.forEach(function (action) {
      var fromStack = stacks[action.from];
      var toStack = stacks[action.to];
      var temp = fromStack.splice(fromStack.length - action.amount | 0, action.amount);
      Caml_splice_call.spliceObjApply(toStack, "push", [temp]);
    });

console.log(Belt_Array.reduce(Belt_Array.sliceToEnd(Belt_Array.map(stacks, (function (prim) {
                    return Caml_option.undefined_to_opt(prim.pop());
                  })), 1), "", (function (acc, cur) {
            return acc + Belt_Option.getWithDefault(cur, "");
          })));

exports.input = input;
exports.stacks = stacks;
exports.pp = pp;
exports.actions = actions;
/* input Not a pure module */
