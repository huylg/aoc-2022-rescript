// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

var root = {};

Caml_obj.update_dummy(root, {
      path: "/",
      dirs: [],
      files: [],
      parent: root
    });

var input = Fs.readFileSync("src/day_7/input", "utf8").split("\n");

var length = input.length;

Belt_Array.reduce(Belt_Array.slice(input, 1, length - 2 | 0), root, (function (pwd, line) {
        var commandLine = line.split(" ");
        var len = commandLine.length;
        if (len !== 2) {
          if (len !== 3) {
            return pwd;
          }
          var match = commandLine[0];
          if (match !== "$") {
            return pwd;
          }
          var match$1 = commandLine[1];
          if (match$1 !== "cd") {
            return pwd;
          }
          var path = commandLine[2];
          switch (path) {
            case ".." :
                return pwd.parent;
            case "/" :
                return root;
            default:
              return Belt_Array.getBy(pwd.dirs, (function (d) {
                            return d.path === path;
                          }));
          }
        } else {
          var size = commandLine[0];
          switch (size) {
            case "$" :
                var match$2 = commandLine[1];
                if (match$2 === "ls") {
                  return pwd;
                }
                break;
            case "dir" :
                var path$1 = commandLine[1];
                var newDir_dirs = [];
                var newDir_files = [];
                var newDir = {
                  path: path$1,
                  dirs: newDir_dirs,
                  files: newDir_files,
                  parent: pwd
                };
                pwd.dirs.push(newDir);
                return pwd;
            default:
              
          }
          var path$2 = commandLine[1];
          var newFile_size = Belt_Int.fromString(size);
          var newFile = {
            path: path$2,
            size: newFile_size
          };
          pwd.files.push(newFile);
          return pwd;
        }
      }));

function $$process(root) {
  var filesSize = Belt_Array.reduce(root.files, 0, (function (acc, cur) {
          return cur.size + acc | 0;
        }));
  var match = Belt_Array.reduce(root.dirs, [
        0,
        0
      ], (function (param, cur) {
          var match = $$process(cur);
          return [
                  param[0] + match[0] | 0,
                  param[1] + match[1] | 0
                ];
        }));
  var result = match[1];
  var total = filesSize + match[0] | 0;
  if (total <= 100000) {
    return [
            total,
            total + result | 0
          ];
  } else {
    return [
            total,
            result
          ];
  }
}

var match = $$process(root);

var result = match[1];

console.log(result);

exports.root = root;
exports.input = input;
exports.length = length;
exports.$$process = $$process;
exports.result = result;
/* input Not a pure module */
