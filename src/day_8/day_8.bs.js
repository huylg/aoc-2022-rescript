// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Js_array = require("rescript/lib/js/js_array.js");
var Js_string = require("rescript/lib/js/js_string.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

var input = Belt_Array.map(Belt_Array.map(Belt_Array.map(Belt_Array.keep(Fs.readFileSync("src/day_8/input", "utf8").split("\n"), (function (e) {
                    return e !== "";
                  })), (function (param) {
                return Js_string.split("", param);
              })), (function (param) {
            return Js_array.map(Belt_Int.fromString, param);
          })), (function (param) {
        return Js_array.map((function (prim) {
                      return prim;
                    }), param);
      }));

console.log(Belt_Array.reduceWithIndex(input, 0, (function (acc, line, x) {
            return acc + Belt_Array.reduceWithIndex(line, 0, (function (acc, e, y) {
                          var left = Belt_Array.every(Belt_Array.slice(line, 0, y), (function (a) {
                                  return a < e;
                                }));
                          var right = Belt_Array.every(Belt_Array.sliceToEnd(line, y + 1 | 0), (function (a) {
                                  return a < e;
                                }));
                          var __x = Belt_Array.slice(input, 0, x);
                          var top = Belt_Array.every(Belt_Array.map(__x, (function (__x) {
                                      return __x[y];
                                    })), (function (a) {
                                  return a < e;
                                }));
                          var __x$1 = Belt_Array.sliceToEnd(input, x + 1 | 0);
                          var bottom = Belt_Array.every(Belt_Array.map(__x$1, (function (__x) {
                                      return __x[y];
                                    })), (function (a) {
                                  return a < e;
                                }));
                          if (left || right || top || bottom) {
                            return acc + 1 | 0;
                          } else {
                            return acc;
                          }
                        })) | 0;
          })));

exports.input = input;
/* input Not a pure module */
