// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Caml = require("rescript/lib/js/caml.js");
var Belt_Id = require("rescript/lib/js/belt_Id.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Js_string = require("rescript/lib/js/js_string.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_MutableSet = require("rescript/lib/js/belt_MutableSet.js");

var input = Belt_Array.map(Belt_Array.map(Belt_Array.keep(Fs.readFileSync("src/day_9/test", "utf8").split("\n"), (function (e) {
                return e !== "";
              })), (function (param) {
            return Js_string.split(" ", param);
          })), (function (line) {
        return [
                line[0],
                Belt_Int.fromString(line[1])
              ];
      }));

function cmp(a, b) {
  var c = Caml.int_compare(a.x, b.x);
  if (c !== 0) {
    return c;
  } else {
    return Caml.int_compare(a.y, b.y);
  }
}

var PairComparator = Belt_Id.MakeComparable({
      cmp: cmp
    });

var points = Belt_MutableSet.make(PairComparator);

var s = {
  x: 0,
  y: 0
};

var h = {
  contents: s
};

var t = {
  contents: s
};

var result = Belt_Array.map(Belt_Array.flatMap(input, (function (param) {
            return Belt_Array.make(param[1], param[0]);
          })), (function (d) {
        var tmp;
        switch (d) {
          case "D" :
              tmp = {
                x: h.contents.x,
                y: h.contents.y - 1 | 0
              };
              break;
          case "L" :
              tmp = {
                x: h.contents.x - 1 | 0,
                y: h.contents.y
              };
              break;
          case "R" :
              tmp = {
                x: h.contents.x + 1 | 0,
                y: h.contents.y
              };
              break;
          case "U" :
              tmp = {
                x: h.contents.x,
                y: h.contents.y + 1 | 0
              };
              break;
          default:
            tmp = s;
        }
        h.contents = tmp;
        var match = h.contents.x - t.contents.x | 0;
        var match$1 = t.contents.y - h.contents.y | 0;
        var tmp$1;
        switch (match) {
          case -2 :
              tmp$1 = match$1 !== 0 ? ({
                    x: t.contents.x + 1 | 0,
                    y: t.contents.y + 1 | 0
                  }) : ({
                    x: t.contents.x - 1 | 0,
                    y: t.contents.y
                  });
              break;
          case 0 :
              tmp$1 = match$1 !== -2 ? (
                  match$1 !== 2 ? t.contents : ({
                        x: t.contents.x,
                        y: t.contents.y + 1 | 0
                      })
                ) : ({
                    x: t.contents.x,
                    y: t.contents.y - 1 | 0
                  });
              break;
          case -1 :
          case 1 :
              tmp$1 = t.contents;
              break;
          case 2 :
              tmp$1 = match$1 !== 0 ? ({
                    x: t.contents.x - 1 | 0,
                    y: t.contents.y - 1 | 0
                  }) : ({
                    x: t.contents.x + 1 | 0,
                    y: t.contents.y
                  });
              break;
          default:
            tmp$1 = t.contents;
        }
        t.contents = tmp$1;
        return t.contents;
      }));

console.log(result);

exports.input = input;
exports.PairComparator = PairComparator;
exports.points = points;
exports.s = s;
exports.h = h;
exports.t = t;
exports.result = result;
/* input Not a pure module */
